const std = @import("std");

pub const zlex_version = "<= ctx.zlex_version : {s} =>+<= ctx.commit : {s} =>";
pub const zison_version = "<= ctx.zison_version : {s} =>+<= ctx.commit : {s} =>";

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer {
        _ = gpa.detectLeaks();
    }
    const allocator = gpa.allocator();

    const args = try std.process.argsAlloc(allocator);
    defer std.process.argsFree(allocator, args);

    if (args.len > 1) {
        if (std.mem.eql(u8, args[1], "zlex")) {
            try std.io.getStdOut().writer().print("{s}", .{zlex_version});
        }

        if (std.mem.eql(u8, args[1], "zison")) {
            try std.io.getStdOut().writer().print("{s}", .{zison_version});
        }
    }
}
