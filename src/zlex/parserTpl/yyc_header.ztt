#define ZLEX_CAST_U8PTR(x) ((uint8_t *)(void *)(x))
#define ZLEX_CAST_UINTPTR(x) ((uintptr_t)(void *)(x))
static uintptr_t <= ctx.prefix : {s} =>_parser_intptr = 0;
static int <= ctx.prefix : {s} =>_parser_param_reg[8];
static int <= ctx.prefix : {s} =>_control;
void <= ctx.prefix : {s} =>_setup_parser(intptr_t ptr) {
    <= ctx.prefix : {s} =>_parser_intptr = ptr;
}
void <= ctx.prefix : {s} =>_set_parser_param_reg(int index, int v) {
    <= ctx.prefix : {s} =>_parser_param_reg[index] = v;
}
extern void <= ctx.prefix : {s} =>_call_user_action(uintptr_t zyy_parser_intptr);
extern void <= ctx.prefix : {s} =>_call_user_init(uintptr_t zyy_parser_intptr);
#define ZLEX_CONTROL(x)                      \
    switch ((x)) {                           \
        case 0 /*RETURN*/:                   \
            return 0;                        \
        case 1 /*REJECT*/: {                 \
            REJECT;                          \
        } break;                             \
        case 2 /*TERMINATE*/: {              \
            yyterminate();                   \
        } break;                             \
        case 3 /*YYLESS*/: {                 \
            yyless(<= ctx.prefix : {s} =>_parser_param_reg[0]); \
        } break;                             \
    }
#define YY_USER_ACTION                           \
    {yyset_column(yycolumn + yyleng, yyg);       \
     <= ctx.prefix : {s} =>_call_user_action(<= ctx.prefix : {s} =>_parser_intptr);};
#define YY_USER_INIT                           \
    (<= ctx.prefix : {s} =>_call_user_init(<= ctx.prefix : {s} =>_parser_intptr));
