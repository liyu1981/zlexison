export fn <= ctx.prefix : {s} =>_parser_<= ctx.name : {s} =>(parser_intptr: usize) u32 {
    var parser = @as(*Parser, @ptrFromInt(parser_intptr));
    _ = &parser;
    <= ctx.prefix : {s} =>_parser_<= ctx.name: {s} =>_impl(parser) catch |err| switch (err) {
        ZA.YYControl.E.RETURN => return ZA.YYControl.INT_RETURN,
        ZA.YYControl.E.REJECT => return ZA.YYControl.INT_REJECT,
        ZA.YYControl.E.TERMINATE => return ZA.YYControl.INT_TERMINATE,
        ZA.YYControl.E.YYLESS => return ZA.YYControl.INT_YYLESS,
        ZA.YYControl.E.CONTINUE => return ZA.YYControl.INT_CONTINUE,
        else => {
            std.io.getStdErr().writer().print("{any}, line: {d}, column: {d}\n", .{err, Parser.ZA.yyget_lineno(), Parser.ZA.yyget_column()}) catch {};
            @panic("parser crashed");
        },
    };
    return ZA.YYControl.INT_RETURN;
}
fn <= ctx.prefix : {s} =>_parser_<= ctx.name: {s} =>_impl(parser: *Parser) anyerror!void {
<= ctx.code: {s} =>
}
